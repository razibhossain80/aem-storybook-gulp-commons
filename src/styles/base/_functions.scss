// px to em converter
// @usage `font-size: em(12px);`
$browsing-context: 16px;
@function em($pixels, $context: $browsing-context) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  @return $pixels / $browsing-context * 1em;
}

// px to rem converter
// @usage `font-size: rem(12px);`
@function rem($pixels, $context: $browsing-context) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  @return calc($pixels / $browsing-context * 1rem);
}


// Function to replace characters in a string
// @see [SVG Encoding](https://codepen.io/jakob-e/pen/YXXBrp
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @if $index { @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace); }
    @return $string;
  }

  
  // Function to create an optimized svg url (may need a few extra replacements)
// @see [SVG Encoding](https://codepen.io/jakob-e/pen/YXXBrp
// @usage `background-image : svg-url('<svg...>...</svg>');`
@function svg-url($svg){
    $svg: str-replace($svg,'"','\'');
    $svg: str-replace($svg,'<','%3C');
    $svg: str-replace($svg,'>','%3E');
    $svg: str-replace($svg,'&','%26');
    $svg: str-replace($svg,'#','%23');
    @return url("data:image/svg+xml;charset=utf8,#{$svg}");
  }
  